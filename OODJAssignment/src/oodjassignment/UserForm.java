/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oodjassignment;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.Style;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author K15H3N
 */
public class UserForm extends javax.swing.JPanel {

    /**
     * Creates new form APLS_register
     */
    public UserForm() {
        initComponents();
        initializeUser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectUserLBL = new javax.swing.JLabel();
        roleCB = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerList = new javax.swing.JTable();
        customerLBL = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        technicianList = new javax.swing.JTable();
        technicianLBL = new javax.swing.JLabel();
        user_idTXT = new javax.swing.JTextField();
        user_idLBL = new javax.swing.JLabel();
        nameLBL = new javax.swing.JLabel();
        nameTXT = new javax.swing.JTextField();
        emailLBL = new javax.swing.JLabel();
        emailTXT = new javax.swing.JTextField();
        dateCreatedLBL = new javax.swing.JLabel();
        dateCreatedTXT = new javax.swing.JTextField();
        payGradeTXT = new javax.swing.JTextField();
        payGradeLBL = new javax.swing.JLabel();
        passwordLBL = new javax.swing.JLabel();
        confirmPasswordLBL = new javax.swing.JLabel();
        addUser = new javax.swing.JButton();
        deleteUser = new javax.swing.JButton();
        saveChanges = new javax.swing.JButton();
        showPasswordCHKBX = new javax.swing.JCheckBox();
        confirmPasswordTXT = new javax.swing.JPasswordField();
        passwordTXT = new javax.swing.JPasswordField();
        jScrollPane4 = new javax.swing.JScrollPane();
        managerList = new javax.swing.JTable();
        managerLBL = new javax.swing.JLabel();
        addressTXT = new javax.swing.JTextField();
        addressLBL = new javax.swing.JLabel();
        btnUsersReport = new javax.swing.JButton();

        setBackground(new java.awt.Color(235, 215, 194));
        setForeground(new java.awt.Color(0, 33, 71));
        setPreferredSize(new java.awt.Dimension(900, 600));

        selectUserLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        selectUserLBL.setForeground(new java.awt.Color(0, 33, 71));
        selectUserLBL.setText("Select User:");

        roleCB.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        roleCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Customer", "Manager", "Technician" }));
        roleCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleCBActionPerformed(evt);
            }
        });

        customerList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        customerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Address", "Date Created"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerList.getTableHeader().setReorderingAllowed(false);
        customerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerListMouseClicked(evt);
            }
        });
        customerList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customerListKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(customerList);

        customerLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        customerLBL.setForeground(new java.awt.Color(0, 33, 71));
        customerLBL.setText("Customers");

        technicianList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        technicianList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Password", "Pay Grade", "Date Created"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        technicianList.getTableHeader().setReorderingAllowed(false);
        technicianList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                technicianListMouseClicked(evt);
            }
        });
        technicianList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                technicianListKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(technicianList);

        technicianLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        technicianLBL.setForeground(new java.awt.Color(0, 33, 71));
        technicianLBL.setText("Center Technicians");

        user_idTXT.setEditable(false);
        user_idTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        user_idLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        user_idLBL.setForeground(new java.awt.Color(0, 33, 71));
        user_idLBL.setText("User ID");

        nameLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        nameLBL.setForeground(new java.awt.Color(0, 33, 71));
        nameLBL.setText("Name");

        nameTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        emailLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        emailLBL.setForeground(new java.awt.Color(0, 33, 71));
        emailLBL.setText("Email");

        emailTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        dateCreatedLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        dateCreatedLBL.setForeground(new java.awt.Color(0, 33, 71));
        dateCreatedLBL.setText("Date Created");

        dateCreatedTXT.setEditable(false);
        dateCreatedTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        dateCreatedTXT.setEnabled(false);

        payGradeTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        payGradeLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        payGradeLBL.setForeground(new java.awt.Color(0, 33, 71));
        payGradeLBL.setText("Pay Grade");

        passwordLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        passwordLBL.setForeground(new java.awt.Color(0, 33, 71));
        passwordLBL.setText("Password");

        confirmPasswordLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        confirmPasswordLBL.setForeground(new java.awt.Color(0, 33, 71));
        confirmPasswordLBL.setText("Confirm Password");

        addUser.setBackground(new java.awt.Color(0, 33, 71));
        addUser.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        addUser.setForeground(new java.awt.Color(255, 255, 255));
        addUser.setText("Add User");
        addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActionPerformed(evt);
            }
        });

        deleteUser.setBackground(new java.awt.Color(0, 33, 71));
        deleteUser.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        deleteUser.setForeground(new java.awt.Color(255, 255, 255));
        deleteUser.setText("Delete User");
        deleteUser.setEnabled(false);
        deleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserActionPerformed(evt);
            }
        });

        saveChanges.setBackground(new java.awt.Color(0, 33, 71));
        saveChanges.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        saveChanges.setForeground(new java.awt.Color(255, 255, 255));
        saveChanges.setText("Save Changes");
        saveChanges.setEnabled(false);
        saveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesActionPerformed(evt);
            }
        });

        showPasswordCHKBX.setText("Show Password");
        showPasswordCHKBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordCHKBXActionPerformed(evt);
            }
        });

        confirmPasswordTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        passwordTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        managerList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        managerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Password", "Date Created"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        managerList.getTableHeader().setReorderingAllowed(false);
        managerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                managerListMouseClicked(evt);
            }
        });
        managerList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                managerListKeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(managerList);

        managerLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        managerLBL.setForeground(new java.awt.Color(0, 33, 71));
        managerLBL.setText("Center Managers");

        addressTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        addressLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        addressLBL.setForeground(new java.awt.Color(0, 33, 71));
        addressLBL.setText("Address");

        btnUsersReport.setBackground(new java.awt.Color(0, 33, 71));
        btnUsersReport.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        btnUsersReport.setForeground(new java.awt.Color(255, 255, 255));
        btnUsersReport.setText("Print Users");
        btnUsersReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsersReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(customerLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUsersReport))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(technicianLBL)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(managerLBL))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectUserLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roleCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addressLBL))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateCreatedLBL)
                                    .addComponent(dateCreatedTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(emailLBL)
                                    .addComponent(emailTXT)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(user_idLBL)
                                    .addComponent(user_idTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nameLBL)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(nameTXT))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(confirmPasswordLBL)
                                    .addComponent(passwordLBL)
                                    .addComponent(confirmPasswordTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(passwordTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(payGradeLBL)
                                    .addComponent(payGradeTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(showPasswordCHKBX)))
                            .addComponent(addressTXT))
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(addUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(saveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(emailLBL)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addUser)
                        .addGap(33, 33, 33)
                        .addComponent(saveChanges)
                        .addGap(38, 38, 38)
                        .addComponent(deleteUser))
                    .addComponent(confirmPasswordTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confirmPasswordLBL)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(selectUserLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(roleCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(addressLBL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(user_idLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(user_idTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addressTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(payGradeLBL)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(payGradeTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(passwordLBL)
                                        .addGap(29, 29, 29))
                                    .addComponent(passwordTXT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dateCreatedLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dateCreatedTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(showPasswordCHKBX)
                                .addGap(12, 12, 12)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerLBL, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(technicianLBL)
                        .addComponent(btnUsersReport)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(managerLBL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void customerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerListMouseClicked
        technicianList.clearSelection();
        managerList.clearSelection();
        userInfo(customerList);
    }//GEN-LAST:event_customerListMouseClicked

    private void customerListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerListKeyReleased
        technicianList.clearSelection();
        managerList.clearSelection();
        userInfo(customerList);
    }//GEN-LAST:event_customerListKeyReleased

    private void technicianListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_technicianListMouseClicked
        customerList.clearSelection();
        managerList.clearSelection();
        userInfo(technicianList);
    }//GEN-LAST:event_technicianListMouseClicked

    private void technicianListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_technicianListKeyReleased
        customerList.clearSelection();
        managerList.clearSelection();
        userInfo(technicianList);
    }//GEN-LAST:event_technicianListKeyReleased

    public Boolean addUserMode = true; //Boolean check if ready to add new user
    private void addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActionPerformed
        if (addUserMode == false){
            addUserMode = true;
            addUser.setText("Add New User");
            roleCB.setEnabled(true);
            saveChanges.setEnabled(false);
            deleteUser.setEnabled(false);

            //Clear Selections
            technicianList.clearSelection();
            customerList.clearSelection();
            managerList.clearSelection();

            initializeUser();
        }
        else if (roleCB.getSelectedIndex() == 2){ // technician
            if ((nameTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true) || (payGradeTXT.getText().equals("") == true) || (String.valueOf(passwordTXT.getPassword()).equals("") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true) || (payGradeTXT.getText().contains(":") == true) || (String.valueOf(passwordTXT.getPassword()).contains(":") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (payGradeTXT.getText().length() != numbersOnly()){ //if length == number of times means that each character is a number
                JOptionPane.showMessageDialog(null, "The pay grade entered is invalid, please ensure only numbers are entered and that there are no ':' characters", "Invalid Pay Grade", JOptionPane.WARNING_MESSAGE);
                payGradeTXT.requestFocus();
            }        //Check if between 2 - 3 characters
            else if ((Integer.valueOf(payGradeTXT.getText()) < 100) || (Integer.valueOf(payGradeTXT.getText()) > 150)){
                JOptionPane.showMessageDialog(null, "The pay grade entered is invalid, please ensure that it is between 100 to 150", "Invalid Pay Grade", JOptionPane.WARNING_MESSAGE);
                payGradeTXT.requestFocus();
            }
            else if (isEmail() == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else if (String.valueOf(passwordTXT.getPassword()).equals(String.valueOf(confirmPasswordTXT.getPassword())) == false) {
                JOptionPane.showMessageDialog(null, "Password & Confirm Password Do Not Match! Please re-enter passwords", "Passwords don't match", JOptionPane.WARNING_MESSAGE);
            }
            else{
                centerManager technician = new centerManager();
                technician.registerCenterTechnician(user_idTXT.getText(), nameTXT.getText(), emailTXT.getText(),dateCreatedTXT.getText(), String.valueOf(passwordTXT.getPassword()), Integer.valueOf(payGradeTXT.getText()));
                initializeUser();
            }
        }
        else if (roleCB.getSelectedIndex() == 1){ // manager
            if ((nameTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true) || (String.valueOf(passwordTXT.getPassword()).equals("") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true) || (String.valueOf(passwordTXT.getPassword()).contains(":") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (isEmail() == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else if (String.valueOf(passwordTXT.getPassword()).equals(String.valueOf(confirmPasswordTXT.getPassword())) == false) {
                JOptionPane.showMessageDialog(null, "Password & Confirm Password Do Not Match! Please re-enter passwords", "Passwords don't match", JOptionPane.WARNING_MESSAGE);
            }
            else{
                centerManager manager = new centerManager();
                manager.registerCenterManager(user_idTXT.getText(), nameTXT.getText(), emailTXT.getText(), dateCreatedTXT.getText(), String.valueOf(passwordTXT.getPassword()));
                initializeUser();
            }
        }
        else if (roleCB.getSelectedIndex() == 0){ // customer
            if ((nameTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true) || (addressTXT.getText().equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (isEmail() == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else{
                centerManager customer = new centerManager();
                customer.registerCustomer(user_idTXT.getText(), nameTXT.getText(), emailTXT.getText(), addressTXT.getText(), dateCreatedTXT.getText());
                initializeUser();
            }
        }
    }//GEN-LAST:event_addUserActionPerformed

    int userTable; //boolean to keep track of which table
    private void deleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you would like to delete this user?", 
                                      "Delete User?", 
                                      JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            
            centerManager managerAction = new centerManager();
            if (userTable == 0){ // customer
                managerAction.deleteCustomer(customerList.getRowCount(), customerList.getColumnCount(), customerList.getSelectedRow());
            } else if (userTable == 1){ // manager
                managerAction.deleteCenterManager(managerList.getRowCount(), managerList.getColumnCount(), managerList.getSelectedRow());
            } else if (userTable == 2){ // technician
                managerAction.deleteCenterTechnician(technicianList.getRowCount(), technicianList.getColumnCount(), technicianList.getSelectedRow());
            }
        
        addUser.doClick();
        initializeUser();
        } else {}
    }//GEN-LAST:event_deleteUserActionPerformed
    
    private void saveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesActionPerformed
        if (roleCB.getSelectedIndex() == 2){ // technician
            if ((nameTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true) || (payGradeTXT.getText().equals("") == true) || (String.valueOf(passwordTXT.getPassword()).equals("") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true) || (payGradeTXT.getText().contains(":") == true) || (String.valueOf(passwordTXT.getPassword()).contains(":") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (payGradeTXT.getText().length() != numbersOnly()){ //if length == number of times means that each character is a number
                JOptionPane.showMessageDialog(null, "The pay grade entered is invalid, please ensure only numbers are entered and that there are no ':' characters", "Invalid Pay Grade", JOptionPane.WARNING_MESSAGE);
                payGradeTXT.requestFocus();
            }        //Check if between 2 - 3 characters
            else if ((Integer.valueOf(payGradeTXT.getText()) < 100) || (Integer.valueOf(payGradeTXT.getText()) > 150)){
                JOptionPane.showMessageDialog(null, "The pay grade entered is invalid, please ensure that it is between 100 to 150", "Invalid Pay Grade", JOptionPane.WARNING_MESSAGE);
                payGradeTXT.requestFocus();
            }
            else if (isEmail() == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else if (String.valueOf(passwordTXT.getPassword()).equals(String.valueOf(confirmPasswordTXT.getPassword())) == false) {
                JOptionPane.showMessageDialog(null, "Password & Confirm Password Do Not Match! Please re-enter passwords", "Passwords don't match", JOptionPane.WARNING_MESSAGE);
            }
            else{
                centerManager technician = new centerManager();
                technician.updateTechnician(Integer.valueOf(user_idTXT.getText()), nameTXT.getText(), emailTXT.getText(), String.valueOf(passwordTXT.getPassword()), Integer.valueOf(payGradeTXT.getText()), dateCreatedTXT.getText(), technicianList.getRowCount(), technicianList.getColumnCount(), technicianList.getSelectedRow());
                addUser.doClick();
                initializeUser();
            }
        }
        else if (roleCB.getSelectedIndex() == 1){ // manager
            if ((nameTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true) || (String.valueOf(passwordTXT.getPassword()).equals("") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true) || (String.valueOf(passwordTXT.getPassword()).contains(":") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (isEmail() == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else if (String.valueOf(passwordTXT.getPassword()).equals(String.valueOf(confirmPasswordTXT.getPassword())) == false) {
                JOptionPane.showMessageDialog(null, "Password & Confirm Password Do Not Match! Please re-enter passwords", "Passwords don't match", JOptionPane.WARNING_MESSAGE);
            }
            else{
                centerManager manager = new centerManager();
                manager.updateManager(Integer.valueOf(user_idTXT.getText()), nameTXT.getText(), emailTXT.getText(), String.valueOf(passwordTXT.getPassword()), dateCreatedTXT.getText(), managerList.getRowCount(), managerList.getColumnCount(), managerList.getSelectedRow());
                addUser.doClick();
                initializeUser();
            }
        }
        else if (roleCB.getSelectedIndex() == 0){ // customer
            if ((nameTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true) || (addressTXT.getText().equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (isEmail() == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else{
                centerManager customer = new centerManager();
                customer.updateCustomer(Integer.valueOf(user_idTXT.getText()), nameTXT.getText(), emailTXT.getText(), addressTXT.getText(), dateCreatedTXT.getText(), customerList.getRowCount(), customerList.getColumnCount(), customerList.getSelectedRow());
                addUser.doClick();
                initializeUser();
            }
        }
    }//GEN-LAST:event_saveChangesActionPerformed

    private void showPasswordCHKBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordCHKBXActionPerformed
        if(showPasswordCHKBX.isSelected()){
            passwordTXT.setEchoChar((char)0);
            confirmPasswordTXT.setEchoChar((char)0);
        } else {
            passwordTXT.setEchoChar('*');
            confirmPasswordTXT.setEchoChar('*');
        }
    }//GEN-LAST:event_showPasswordCHKBXActionPerformed

    private void roleCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleCBActionPerformed
        cbSetter();
    }//GEN-LAST:event_roleCBActionPerformed


    private Boolean isEmail() {
        if (emailTXT.getText().contains("@") == true){
            if (emailTXT.getText().substring(emailTXT.getText().indexOf("@") + 1, emailTXT.getText().length()).contains(".") == true){ //. after @
                //substring (index after @, length) for . value
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
    
    private void managerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_managerListMouseClicked
        technicianList.clearSelection();
        customerList.clearSelection();
        userInfo(managerList);
    }//GEN-LAST:event_managerListMouseClicked

    private void managerListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_managerListKeyReleased
        technicianList.clearSelection();
        customerList.clearSelection();
        userInfo(managerList);
    }//GEN-LAST:event_managerListKeyReleased

    private void btnUsersReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsersReportActionPerformed
        try{
            printManagertRecords();
            printTechniciantRecords();
            printCustomerRecords();
            JOptionPane.showMessageDialog(null, "PDF report generated", "Success!", JOptionPane.INFORMATION_MESSAGE);
        } catch(FileNotFoundException e){
            JOptionPane.showMessageDialog(null, "PDF cannot be created", "An Error occured!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnUsersReportActionPerformed

    
    private void printManagertRecords() throws FileNotFoundException{
        
        
        String filePath = "src\\reports\\users_manager_records.pdf";
        PdfWriter pdf1 = new PdfWriter(filePath);
        
        PdfDocument pdfDoc = new PdfDocument(pdf1);
        
        Document Doc = new Document(pdfDoc);
        
        
        Style styleTitle = new Style();
        styleTitle.setTextAlignment(TextAlignment.CENTER);
        styleTitle.setBold();
        styleTitle.setUnderline();
        styleTitle.setFontSize(34);
        String title = "Manager records";
        Paragraph p1 = new Paragraph(title).addStyle(styleTitle);
        
        Doc.add(p1);
        
        float columnWidth[] = {50,100,100,100,100};
        
        Table table1 = new Table(columnWidth);
        
        table1.addCell("ID");
        table1.addCell("Name");
        table1.addCell("Email");
        table1.addCell("Password");
        table1.addCell("Date Created");

        
        
        for(int i=0; i<managerList.getRowCount() ;i++) {
            String ID = managerList.getValueAt(i, 0).toString();
            String Name = managerList.getValueAt(i, 1).toString();
            String Email = managerList.getValueAt(i, 2).toString();
            String Password = managerList.getValueAt(i, 3).toString();
            String DateCreated = managerList.getValueAt(i, 4).toString();
            
            table1.addCell(ID);
            table1.addCell(Name);
            table1.addCell(Email);
            table1.addCell(Password);
            table1.addCell(DateCreated);
        }
        
        Doc.add(table1);
        
        Doc.close();
        
    }
    
     private void printTechniciantRecords() throws FileNotFoundException{
        
        
        String filePath = "src\\reports\\users_technician_records.pdf";
        PdfWriter pdf1 = new PdfWriter(filePath);
        
        PdfDocument pdfDoc = new PdfDocument(pdf1);
        
        Document Doc = new Document(pdfDoc);
        
        
        Style styleTitle = new Style();
        styleTitle.setTextAlignment(TextAlignment.CENTER);
        styleTitle.setBold();
        styleTitle.setUnderline();
        styleTitle.setFontSize(34);
        String title = "Technician records";
        Paragraph p1 = new Paragraph(title).addStyle(styleTitle);
        
        Doc.add(p1);
        
        float columnWidth[] = {50,100,100,100,100,100};
        
        Table table1 = new Table(columnWidth);
        
        table1.addCell("ID");
        table1.addCell("Name");
        table1.addCell("Email");
        table1.addCell("Password");
        table1.addCell("Pay Grade");
        table1.addCell("Date Created");

        
        
        for(int i=0; i<technicianList.getRowCount() ;i++) {
            String ID = technicianList.getValueAt(i, 0).toString();
            String Name = technicianList.getValueAt(i, 1).toString();
            String Email = technicianList.getValueAt(i, 2).toString();
            String Password = technicianList.getValueAt(i, 3).toString();
            String Pay = technicianList.getValueAt(i, 4).toString();
            String DateCreated = technicianList.getValueAt(i, 5).toString();
            
            table1.addCell(ID);
            table1.addCell(Name);
            table1.addCell(Email);
            table1.addCell(Password);
            table1.addCell(Pay);
            table1.addCell(DateCreated);
        }
        
        Doc.add(table1);
        
        Doc.close();
        
    }
     
     
    private void printCustomerRecords() throws FileNotFoundException{
        
        
        String filePath = "src\\reports\\users_customer_records.pdf";
        PdfWriter pdf1 = new PdfWriter(filePath);
        
        PdfDocument pdfDoc = new PdfDocument(pdf1);
        
        Document Doc = new Document(pdfDoc);
        
        
        Style styleTitle = new Style();
        styleTitle.setTextAlignment(TextAlignment.CENTER);
        styleTitle.setBold();
        styleTitle.setUnderline();
        styleTitle.setFontSize(34);
        String title = "Customer records";
        Paragraph p1 = new Paragraph(title).addStyle(styleTitle);
        
        Doc.add(p1);
        
        float columnWidth[] = {50,100,100,100,100};
        
        Table table1 = new Table(columnWidth);
        
        table1.addCell("ID");
        table1.addCell("Name");
        table1.addCell("Email");
        table1.addCell("Adress");
        table1.addCell("Date Created");

        
        
        for(int i=0; i<customerList.getRowCount() ;i++) {
            String ID = customerList.getValueAt(i, 0).toString();
            String Name = customerList.getValueAt(i, 1).toString();
            String Email = customerList.getValueAt(i, 2).toString();
            String Adress = customerList.getValueAt(i, 3).toString();
            String DateCreated = customerList.getValueAt(i, 4).toString();
            
            table1.addCell(ID);
            table1.addCell(Name);
            table1.addCell(Email);
            table1.addCell(Adress);
            table1.addCell(DateCreated);
        }
        
        Doc.add(table1);
        
        Doc.close();
        
    }
    
    
    private int numbersOnly(){
        String[] numbers = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
        int numericalValues = 0;
        
        for(int digit =0; digit < payGradeTXT.getText().length(); digit++){ //for each character in string
            for(int i =0; i < numbers.length; i++){ //check if matches with each digit
                if (payGradeTXT.getText().substring(digit, digit + 1).equals(numbers[i])){
                    numericalValues++; // increment by 1
                }
            }
        }
        
        return numericalValues;
    }
        
    public static void cbSetter(){
        if(roleCB.getSelectedIndex() == 2){ // technician            
            payGradeTXT.setEnabled(true);
            passwordTXT.setEnabled(true);
            confirmPasswordTXT.setEnabled(true);
            showPasswordCHKBX.setEnabled(true);
            addressTXT.setEnabled(false);
            addressTXT.setText("");
            
            if (roleCB.isEnabled()){
            try{
            File technician = new File("src/db/centerTechnician_t.txt");
                
            FileReader fr = new FileReader(technician);
            BufferedReader br = new BufferedReader(fr);

            DefaultTableModel model = (DefaultTableModel)technicianList.getModel();
            Object[] lines = br.lines().toArray();
            
            //Generate new manager ID
            int newTechnicianID = 0;
            for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split(":");
                if (Integer.parseInt(row[0]) > newTechnicianID){ //if row's id is greater than previous row,
                    newTechnicianID = Integer.parseInt(row[0]);  //update variable to reflect largest value
                }
            }
            //Display in TextField
            String nextTechnicianID = String.valueOf(newTechnicianID + 1);
            user_idTXT.setText(nextTechnicianID);
            
            } catch (FileNotFoundException ex){}
            }
            
        } else if(roleCB.getSelectedIndex() == 1) { // manager
            payGradeTXT.setEnabled(false);
            payGradeTXT.setText("");
            passwordTXT.setEnabled(true);
            confirmPasswordTXT.setEnabled(true);
            showPasswordCHKBX.setEnabled(true);
            addressTXT.setEnabled(false);
            addressTXT.setText("");
            
            if (roleCB.isEnabled()){
            try{
            File manager = new File("src/db/centerManager_t.txt");
                
            FileReader fr = new FileReader(manager);
            BufferedReader br = new BufferedReader(fr);

            DefaultTableModel model = (DefaultTableModel)managerList.getModel();
            Object[] lines = br.lines().toArray();
            
            //Generate new manager ID
            int newManagerID = 0;
            for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split(":");
                if (Integer.parseInt(row[0]) > newManagerID){ //if row's id is greater than previous row,
                    newManagerID = Integer.parseInt(row[0]);  //update variable to reflect largest value
                }
            }
            //Display in TextField
            String nextManagerID = String.valueOf(newManagerID + 1);
            user_idTXT.setText(nextManagerID);
            
            } catch (FileNotFoundException ex){}
            }
            
        } else if(roleCB.getSelectedIndex() == 0) { // customer
            payGradeTXT.setEnabled(false);
            payGradeTXT.setText("");
            passwordTXT.setEnabled(false);
            passwordTXT.setText("");
            confirmPasswordTXT.setEnabled(false);
            confirmPasswordTXT.setText("");
            showPasswordCHKBX.setEnabled(false);
            addressTXT.setEnabled(true);
            
            if (roleCB.isEnabled()){
            try{
            File customer = new File("src/db/customer_t.txt");
                
            FileReader fr = new FileReader(customer);
            BufferedReader br = new BufferedReader(fr);

            DefaultTableModel model = (DefaultTableModel)customerList.getModel();
            Object[] lines = br.lines().toArray();
            
            //Generate new manager ID
            int newCustomerID = 0;
            for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split(":");
                if (Integer.parseInt(row[0]) > newCustomerID){ //if row's id is greater than previous row,
                    newCustomerID = Integer.parseInt(row[0]);  //update variable to reflect largest value
                }
            }
            //Display in TextField
            String nextCustomerID = String.valueOf(newCustomerID + 1);
            user_idTXT.setText(nextCustomerID);
            
            } catch (FileNotFoundException ex){}
            }
        }
    }
    static private String passwordListManager = "";
    static private String passwordListTechnician = "";
    private String[] passwordArray;
    private String passwordSelected;
    
    public String getPasswordManager(int selectedRow){
        passwordArray = passwordListManager.toString().split(":");
        passwordSelected = passwordArray[selectedRow];
        return passwordSelected;
    }
    
    public String getPasswordTechnician(int selectedRow){
        passwordArray = passwordListTechnician.toString().split(":");
        passwordSelected = passwordArray[selectedRow];
        return passwordSelected;
    }
    
    static SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
    public static void initializeUser(){       
        //Clear Textboxes
        //roleCB.setSelectedIndex(0);
        user_idTXT.setText("");
        nameTXT.setText("");
        emailTXT.setText("");
        payGradeTXT.setText("");
        passwordTXT.setText("");
        confirmPasswordTXT.setText("");
        addressTXT.setText("");
        
        Date dateCreated = new Date();
        dateCreatedTXT.setText(formatter.format(dateCreated));
        
        cbSetter();
        
        try{
        //CUSTOMER_T
        File customer = new File("src/db/customer_t.txt");
        
        FileReader fr = new FileReader(customer);
        BufferedReader br = new BufferedReader(fr);
            
        DefaultTableModel model = (DefaultTableModel)customerList.getModel();
        model.setRowCount(0); //clear table
        Object[] lines = br.lines().toArray();
        
        //List Customers
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            model.addRow(row); //load data
        }
        
        //MANAGER_T
        File manager = new File("src/db/centerManager_t.txt");
                
        fr = new FileReader(manager);
        br = new BufferedReader(fr);
            
        model = (DefaultTableModel)managerList.getModel();
        model.setRowCount(0); //clear table
        lines = br.lines().toArray();
        
        passwordListManager = "";
        //List Managers
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            passwordListManager = passwordListManager + row[3] + ":";
            row[3] = "******";
            model.addRow(row); //load data
        }
        
        //TECHNICIAN_T
        File technician = new File("src/db/centerTechnician_t.txt");
                
        fr = new FileReader(technician);
        br = new BufferedReader(fr);
            
        model = (DefaultTableModel)technicianList.getModel();
        model.setRowCount(0); //clear table
        lines = br.lines().toArray();
        
        passwordListTechnician = "";
        //List Technician
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            passwordListTechnician = passwordListTechnician + row[3] + ":";
            row[3] = "******";
            model.addRow(row); //load data
        }
        } catch(FileNotFoundException ex){}
    }
    
    public void userInfo(javax.swing.JTable table){
        DefaultTableModel model = (DefaultTableModel)table.getModel(); //model from JTable
        int rowIndex = table.getSelectedRow();

        //Save to variables
        int user_id = Integer.parseInt(model.getValueAt(rowIndex, 0).toString());
        String user_name = model.getValueAt(rowIndex, 1).toString();

        nameTXT.setText(user_name);

        //Save to variables
        if (table == technicianList){
            String user_email = model.getValueAt(rowIndex, 2).toString();
            String password = model.getValueAt(rowIndex, 3).toString();
            String pay_grade = model.getValueAt(rowIndex, 4).toString();
            String dateCreated = model.getValueAt(rowIndex, 5).toString();

            roleCB.setSelectedIndex(2);
            dateCreatedTXT.setText(dateCreated);
            emailTXT.setText(user_email);
            payGradeTXT.setText(pay_grade);
            passwordTXT.setText(getPasswordTechnician(rowIndex));
            confirmPasswordTXT.setText("");
            
            userTable = 2;
        } else if (table == managerList){
            String user_email = model.getValueAt(rowIndex, 2).toString();
            String password = model.getValueAt(rowIndex, 3).toString();
            String dateCreated = model.getValueAt(rowIndex, 4).toString();

            roleCB.setSelectedIndex(1);
            dateCreatedTXT.setText(dateCreated);
            emailTXT.setText(user_email);
            passwordTXT.setText(getPasswordManager(rowIndex));
            confirmPasswordTXT.setText("");
            
            userTable = 1;
        } else if (table == customerList){
            String user_email = model.getValueAt(rowIndex, 2).toString();
            String address = model.getValueAt(rowIndex, 3).toString();
            String dateCreated = model.getValueAt(rowIndex, 4).toString();

            addressTXT.setText(address);
            dateCreatedTXT.setText(dateCreated);
            emailTXT.setText(user_email);
            
            userTable = 0;
            roleCB.setSelectedIndex(0);
        }
        user_idTXT.setText(String.valueOf(user_id));
        
        addUser.setText("Create New User");
        roleCB.setEnabled(false);
        saveChanges.setEnabled(true);
        deleteUser.setEnabled(true);
        addUserMode = false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUser;
    private javax.swing.JLabel addressLBL;
    protected static javax.swing.JTextField addressTXT;
    private javax.swing.JButton btnUsersReport;
    private javax.swing.JLabel confirmPasswordLBL;
    protected static javax.swing.JPasswordField confirmPasswordTXT;
    private javax.swing.JLabel customerLBL;
    public static javax.swing.JTable customerList;
    private javax.swing.JLabel dateCreatedLBL;
    protected static javax.swing.JTextField dateCreatedTXT;
    private javax.swing.JButton deleteUser;
    private javax.swing.JLabel emailLBL;
    protected static javax.swing.JTextField emailTXT;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel managerLBL;
    public static javax.swing.JTable managerList;
    private javax.swing.JLabel nameLBL;
    protected static javax.swing.JTextField nameTXT;
    private javax.swing.JLabel passwordLBL;
    protected static javax.swing.JPasswordField passwordTXT;
    private javax.swing.JLabel payGradeLBL;
    protected static javax.swing.JTextField payGradeTXT;
    protected static javax.swing.JComboBox<String> roleCB;
    private javax.swing.JButton saveChanges;
    private javax.swing.JLabel selectUserLBL;
    private static javax.swing.JCheckBox showPasswordCHKBX;
    private javax.swing.JLabel technicianLBL;
    public static javax.swing.JTable technicianList;
    private javax.swing.JLabel user_idLBL;
    protected static javax.swing.JTextField user_idTXT;
    // End of variables declaration//GEN-END:variables
}
/* REFERENCES

Knowledge To Share, 2019. JTable in JAVA Swing | Delete Selected Row From JTable. [Online] 
Available at: https://www.youtube.com/watch?v=OsgX1grOJZA
[Accessed 15 March 2021].

*/