/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oodjassignment;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author K15H3N
 */
public class UserForm extends javax.swing.JPanel {

    /**
     * Creates new form APLS_register
     */
    public UserForm() {
        initComponents();
        APLS_initializeUser();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectUserLBL = new javax.swing.JLabel();
        roleCB = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        borrowerList = new javax.swing.JTable();
        borrowerLBL = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        librarianList = new javax.swing.JTable();
        librarianLBL = new javax.swing.JLabel();
        user_idTXT = new javax.swing.JTextField();
        user_idLBL = new javax.swing.JLabel();
        nameLBL = new javax.swing.JLabel();
        nameTXT = new javax.swing.JTextField();
        emailLBL = new javax.swing.JLabel();
        emailTXT = new javax.swing.JTextField();
        phone_numberLBL = new javax.swing.JLabel();
        phone_numberTXT = new javax.swing.JTextField();
        usernameTXT = new javax.swing.JTextField();
        usernameLBL = new javax.swing.JLabel();
        passwordLBL = new javax.swing.JLabel();
        confirmPasswordLBL = new javax.swing.JLabel();
        addUser = new javax.swing.JButton();
        deleteUser = new javax.swing.JButton();
        saveChanges = new javax.swing.JButton();
        showPasswordCHKBX = new javax.swing.JCheckBox();
        confirmPasswordTXT = new javax.swing.JPasswordField();
        passwordTXT = new javax.swing.JPasswordField();
        jScrollPane4 = new javax.swing.JScrollPane();
        librarianList1 = new javax.swing.JTable();
        librarianLBL1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(225, 226, 188));
        setPreferredSize(new java.awt.Dimension(900, 600));

        selectUserLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        selectUserLBL.setForeground(new java.awt.Color(226, 38, 88));
        selectUserLBL.setText("Select User:");

        roleCB.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        roleCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Staff", "Librarian" }));
        roleCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleCBActionPerformed(evt);
            }
        });

        borrowerList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        borrowerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Address", "Date Created"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        borrowerList.getTableHeader().setReorderingAllowed(false);
        borrowerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                borrowerListMouseClicked(evt);
            }
        });
        borrowerList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                borrowerListKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(borrowerList);

        borrowerLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        borrowerLBL.setForeground(new java.awt.Color(226, 38, 88));
        borrowerLBL.setText("Customers");

        librarianList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        librarianList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Password", "Pay Grade", "Date Created"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        librarianList.getTableHeader().setReorderingAllowed(false);
        librarianList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                librarianListMouseClicked(evt);
            }
        });
        librarianList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                librarianListKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(librarianList);
        if (librarianList.getColumnModel().getColumnCount() > 0) {
            librarianList.getColumnModel().getColumn(4).setHeaderValue("Pay Grade");
        }

        librarianLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        librarianLBL.setForeground(new java.awt.Color(226, 38, 88));
        librarianLBL.setText("Center Technicians");

        user_idTXT.setEditable(false);
        user_idTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        user_idLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        user_idLBL.setForeground(new java.awt.Color(226, 38, 88));
        user_idLBL.setText("User ID");

        nameLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        nameLBL.setForeground(new java.awt.Color(226, 38, 88));
        nameLBL.setText("Name");

        nameTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        emailLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        emailLBL.setForeground(new java.awt.Color(226, 38, 88));
        emailLBL.setText("Email");

        emailTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        emailTXT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                emailTXTFocusLost(evt);
            }
        });

        phone_numberLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        phone_numberLBL.setForeground(new java.awt.Color(226, 38, 88));
        phone_numberLBL.setText("Phone Number");

        phone_numberTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        phone_numberTXT.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                phone_numberTXTFocusLost(evt);
            }
        });

        usernameTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        usernameLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        usernameLBL.setForeground(new java.awt.Color(226, 38, 88));
        usernameLBL.setText("Username");

        passwordLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        passwordLBL.setForeground(new java.awt.Color(226, 38, 88));
        passwordLBL.setText("Password");

        confirmPasswordLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        confirmPasswordLBL.setForeground(new java.awt.Color(226, 38, 88));
        confirmPasswordLBL.setText("Confirm Password");

        addUser.setBackground(new java.awt.Color(226, 38, 88));
        addUser.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        addUser.setForeground(new java.awt.Color(255, 255, 255));
        addUser.setText("Add User");
        addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActionPerformed(evt);
            }
        });

        deleteUser.setBackground(new java.awt.Color(226, 38, 88));
        deleteUser.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        deleteUser.setForeground(new java.awt.Color(255, 255, 255));
        deleteUser.setText("Delete User");
        deleteUser.setEnabled(false);
        deleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteUserActionPerformed(evt);
            }
        });

        saveChanges.setBackground(new java.awt.Color(226, 38, 88));
        saveChanges.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        saveChanges.setForeground(new java.awt.Color(255, 255, 255));
        saveChanges.setText("Save Changes");
        saveChanges.setEnabled(false);
        saveChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveChangesActionPerformed(evt);
            }
        });

        showPasswordCHKBX.setText("Show Password");
        showPasswordCHKBX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPasswordCHKBXActionPerformed(evt);
            }
        });

        confirmPasswordTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        passwordTXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        librarianList1.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        librarianList1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Email", "Password", "Date Created"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        librarianList1.getTableHeader().setReorderingAllowed(false);
        librarianList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                librarianList1MouseClicked(evt);
            }
        });
        librarianList1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                librarianList1KeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(librarianList1);

        librarianLBL1.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        librarianLBL1.setForeground(new java.awt.Color(226, 38, 88));
        librarianLBL1.setText("Center Managers");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(borrowerLBL)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(librarianLBL)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(librarianLBL1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(phone_numberLBL)
                                            .addComponent(phone_numberTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(emailLBL)
                                            .addComponent(emailTXT)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(user_idLBL)
                                            .addComponent(user_idTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(nameLBL)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                            .addComponent(nameTXT))))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(confirmPasswordLBL)
                                    .addComponent(passwordLBL)
                                    .addComponent(confirmPasswordTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(passwordTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(usernameLBL)
                                    .addComponent(usernameTXT, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(showPasswordCHKBX))
                                .addGap(45, 45, 45))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectUserLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roleCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(addUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(deleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(saveChanges, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(emailLBL)
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addUser)
                        .addGap(33, 33, 33)
                        .addComponent(saveChanges)
                        .addGap(38, 38, 38)
                        .addComponent(deleteUser))
                    .addComponent(confirmPasswordTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confirmPasswordLBL)
                        .addGap(26, 26, 26))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(usernameLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(usernameTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(passwordLBL)
                                .addGap(29, 29, 29))
                            .addComponent(passwordTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(selectUserLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(roleCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(user_idLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(user_idTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(phone_numberLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(phone_numberTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(emailTXT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(showPasswordCHKBX)
                                .addGap(12, 12, 12)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(borrowerLBL, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(librarianLBL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(librarianLBL1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void borrowerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_borrowerListMouseClicked
        librarianList.clearSelection();
        APLS_userInfo(borrowerList);
    }//GEN-LAST:event_borrowerListMouseClicked

    private void borrowerListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_borrowerListKeyReleased
        librarianList.clearSelection();
        APLS_userInfo(borrowerList);
    }//GEN-LAST:event_borrowerListKeyReleased

    private void librarianListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_librarianListMouseClicked
        borrowerList.clearSelection();
        APLS_userInfo(librarianList);
    }//GEN-LAST:event_librarianListMouseClicked

    private void librarianListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_librarianListKeyReleased
        borrowerList.clearSelection();
        APLS_userInfo(librarianList);
    }//GEN-LAST:event_librarianListKeyReleased

    public Boolean addUserMode = true; //Boolean check if ready to add new user
    private void addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActionPerformed
        if (addUserMode == false){
            addUserMode = true;
            addUser.setText("Add New User");
            roleCB.setEnabled(true);
            saveChanges.setEnabled(false);
            deleteUser.setEnabled(false);

            //Clear Selections
            librarianList.clearSelection();
            borrowerList.clearSelection();

            APLS_initializeUser();
        }
        else if (roleCB.getSelectedIndex() == 2){ // librarian
            if ((nameTXT.getText().equals("") == true) || (phone_numberTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true) || (usernameTXT.getText().equals("") == true) || (String.valueOf(passwordTXT.getPassword()).equals("") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (phone_numberTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true) || (usernameTXT.getText().contains(":") == true) || (String.valueOf(passwordTXT.getPassword()).contains(":") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (phone_numberTXT.getText().length() != numbersOnly){ //if length == number of times means that each character is a number
                JOptionPane.showMessageDialog(null, "The phone number entered is invalid, please ensure only numbers are entered and that there are no ':' characters", "Invalid Phone Number", JOptionPane.WARNING_MESSAGE);
                phone_numberTXT.requestFocus();
            }        //Check if between 10 - 12 characters
            else if ((phone_numberTXT.getText().length() < 10) || (phone_numberTXT.getText().length() > 12)){
                JOptionPane.showMessageDialog(null, "The phone number entered is invalid, please ensure that it is between 10 to 12 digits", "Invalid Phone Number", JOptionPane.WARNING_MESSAGE);
                phone_numberTXT.requestFocus();
            }
            else if (isEmail == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else if (String.valueOf(passwordTXT.getPassword()).equals(String.valueOf(confirmPasswordTXT.getPassword())) == false) {
                JOptionPane.showMessageDialog(null, "Password & Confirm Password Do Not Match! Please re-enter passwords", "Passwords don't match", JOptionPane.WARNING_MESSAGE);
            }
            else{
                //CLASS_librarian addLibrarian = new CLASS_librarian(Integer.valueOf(user_idTXT.getText()), nameTXT.getText(), emailTXT.getText(), phone_numberTXT.getText(), usernameTXT.getText(), String.valueOf(passwordTXT.getPassword()));
                APLS_initializeUser();
            }
        }
        else{ // student or staff
            if ((nameTXT.getText().equals("") == true) || (phone_numberTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (phone_numberTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (phone_numberTXT.getText().length() != numbersOnly){ //if length == number of times means that each character is a number
                JOptionPane.showMessageDialog(null, "The phone number entered is invalid, please ensure only numbers are entered and that there are no ':' characters", "Invalid Phone Number", JOptionPane.WARNING_MESSAGE);
                phone_numberTXT.requestFocus();
            }        //Check if between 10 - 12 characters
            else if ((phone_numberTXT.getText().length() < 10) || (phone_numberTXT.getText().length() > 12)){
                JOptionPane.showMessageDialog(null, "The phone number entered is invalid, please ensure that it is between 10 to 12 digits", "Invalid Phone Number", JOptionPane.WARNING_MESSAGE);
                phone_numberTXT.requestFocus();
            }
            else if (isEmail == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else if (roleCB.getSelectedIndex() == 0){ //student
                //CLASS_student addStudent = new CLASS_student(Integer.valueOf(user_idTXT.getText()), nameTXT.getText(), emailTXT.getText(), phone_numberTXT.getText());
                APLS_initializeUser();
            }
            else if (roleCB.getSelectedIndex() == 1){ //staff
                //CLASS_staff addStaff = new CLASS_staff(Integer.valueOf(user_idTXT.getText()), nameTXT.getText(), emailTXT.getText(), phone_numberTXT.getText());
                APLS_initializeUser();
            }
        }
    }//GEN-LAST:event_addUserActionPerformed

    Boolean librarianTable = false; //boolean to keep track of which table
    private void deleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteUserActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you would like to delete this user?", 
                                      "Delete User?", 
                                      JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            if (librarianTable == false ){
                //CLASS_student borrower = new CLASS_student();
                //borrower.deleteUser(borrowerList.getRowCount(), borrowerList.getColumnCount(), borrowerList.getSelectedRow());
            } else{
                //CLASS_librarian librarian = new CLASS_librarian();
                //librarian.deleteUser(librarianList.getRowCount(), librarianList.getColumnCount(), librarianList.getSelectedRow());
            }
        
        addUser.doClick();
        APLS_initializeUser();
        } else {}
    }//GEN-LAST:event_deleteUserActionPerformed
    
    private void saveChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesActionPerformed
        if (roleCB.getSelectedIndex() == 2){ // librarian
            if ((nameTXT.getText().equals("") == true) || (phone_numberTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true) || (usernameTXT.getText().equals("") == true) || (String.valueOf(passwordTXT.getPassword()).equals("") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (phone_numberTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true) || (usernameTXT.getText().contains(":") == true) || (String.valueOf(passwordTXT.getPassword()).contains(":") == true) || (String.valueOf(confirmPasswordTXT.getPassword()).contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (phone_numberTXT.getText().length() != numbersOnly){ //if length == number of times means that each character is a number
                JOptionPane.showMessageDialog(null, "The phone number entered is invalid, please ensure only numbers are entered and that there are no ':' characters", "Invalid Phone Number", JOptionPane.WARNING_MESSAGE);
                phone_numberTXT.requestFocus();
            }        //Check if between 10 - 12 characters
            else if ((phone_numberTXT.getText().length() < 10) || (phone_numberTXT.getText().length() > 12)){
                JOptionPane.showMessageDialog(null, "The phone number entered is invalid, please ensure that it is between 10 to 12 digits", "Invalid Phone Number", JOptionPane.WARNING_MESSAGE);
                phone_numberTXT.requestFocus();
            }
            else if (isEmail == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else if (String.valueOf(passwordTXT.getPassword()).equals(String.valueOf(confirmPasswordTXT.getPassword())) == false) {
                JOptionPane.showMessageDialog(null, "Password & Confirm Password Do Not Match! Please re-enter passwords", "Passwords don't match", JOptionPane.WARNING_MESSAGE);
            }
            else{
                //CLASS_librarian updateLibrarian = new CLASS_librarian(Integer.valueOf(user_idTXT.getText()), nameTXT.getText(), emailTXT.getText(), phone_numberTXT.getText(), usernameTXT.getText(), String.valueOf(passwordTXT.getPassword()), librarianList.getRowCount(), librarianList.getColumnCount(), librarianList.getSelectedRow());
                addUser.doClick();
                APLS_initializeUser();
            }
        }
        else{ // student or staff
            if ((nameTXT.getText().equals("") == true) || (phone_numberTXT.getText().equals("") == true) || (emailTXT.getText().equals("") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure all fields have been filled in", "Incomplete User Information", JOptionPane.WARNING_MESSAGE);
            }
            else if ((nameTXT.getText().contains(":") == true) || (phone_numberTXT.getText().contains(":") == true) || (emailTXT.getText().contains(":") == true)) {
                JOptionPane.showMessageDialog(null, "Please ensure that the textfields do not have the ':' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE);
            }
            else if (phone_numberTXT.getText().length() != numbersOnly){ //if length == number of times means that each character is a number
                JOptionPane.showMessageDialog(null, "The phone number entered is invalid, please ensure only numbers are entered and that there are no ':' characters", "Invalid Phone Number", JOptionPane.WARNING_MESSAGE);
                phone_numberTXT.requestFocus();
            }        //Check if between 10 - 12 characters
            else if ((phone_numberTXT.getText().length() < 10) || (phone_numberTXT.getText().length() > 12)){
                JOptionPane.showMessageDialog(null, "The phone number entered is invalid, please ensure that it is between 10 to 12 digits", "Invalid Phone Number", JOptionPane.WARNING_MESSAGE);
                phone_numberTXT.requestFocus();
            }
            else if (isEmail == false){
                JOptionPane.showMessageDialog(null, "The email entered is invalid, please re-enter the email", "Invalid Email", JOptionPane.WARNING_MESSAGE);
                emailTXT.requestFocus();
            }
            else if (roleCB.getSelectedIndex() == 0){ //student
                //CLASS_student addStudent = new CLASS_student(Integer.valueOf(user_idTXT.getText()), nameTXT.getText(), emailTXT.getText(), phone_numberTXT.getText(), borrowerList.getRowCount(), borrowerList.getColumnCount(), borrowerList.getSelectedRow());
                addUser.doClick();
                APLS_initializeUser();
            }
            else if (roleCB.getSelectedIndex() == 1){ //staff
                //CLASS_student addStudent = new CLASS_student(Integer.valueOf(user_idTXT.getText()), nameTXT.getText(), emailTXT.getText(), phone_numberTXT.getText(), borrowerList.getRowCount(), borrowerList.getColumnCount(), borrowerList.getSelectedRow());
                addUser.doClick();
                APLS_initializeUser();
            }
        }
    }//GEN-LAST:event_saveChangesActionPerformed

    private void showPasswordCHKBXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPasswordCHKBXActionPerformed
        if(showPasswordCHKBX.isSelected()){
            passwordTXT.setEchoChar((char)0);
            confirmPasswordTXT.setEchoChar((char)0);
        } else {
            passwordTXT.setEchoChar('*');
            confirmPasswordTXT.setEchoChar('*');
        }
    }//GEN-LAST:event_showPasswordCHKBXActionPerformed

    private void roleCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleCBActionPerformed
        cbSetter();
    }//GEN-LAST:event_roleCBActionPerformed

    int numbersOnly;
    private void phone_numberTXTFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_phone_numberTXTFocusLost
        String[] numbers = {"0", "1", "2", "3", "4", "5", "6", "7", "8", "9"};
        numbersOnly = 0;
        
        for(int digit =0; digit < phone_numberTXT.getText().length(); digit++){ //for each character in string
            for(int i =0; i < numbers.length; i++){ //check if matches with each digit
                if (phone_numberTXT.getText().substring(digit, digit + 1).equals(numbers[i])){
                    numbersOnly++; // increment by 1
                }
            }
        }
    }//GEN-LAST:event_phone_numberTXTFocusLost

        Boolean isEmail;
    private void emailTXTFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_emailTXTFocusLost
        isEmail = false;
        if (emailTXT.getText().contains("@") == true){
            if (emailTXT.getText().substring(emailTXT.getText().indexOf("@") + 1, emailTXT.getText().length()).contains(".") == true){ //. after @
                //substring (index after @, length) for . value
                isEmail = true;
            }
        }
    }//GEN-LAST:event_emailTXTFocusLost

    private void librarianList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_librarianList1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_librarianList1MouseClicked

    private void librarianList1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_librarianList1KeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_librarianList1KeyReleased
    
    public void cbSetter(){
        if(roleCB.getSelectedIndex() == 2){ //librarian has username & password
            usernameLBL.setVisible(true);
            usernameTXT.setVisible(true);
            passwordLBL.setVisible(true);
            passwordTXT.setVisible(true);
            confirmPasswordLBL.setVisible(true);
            confirmPasswordTXT.setVisible(true);
            showPasswordCHKBX.setVisible(true);
            
            if (roleCB.isEnabled()){
            try{
            File librarian = new File("src/apls_DBTXT/librarian_t.txt");
                
            FileReader fr = new FileReader(librarian);
            BufferedReader br = new BufferedReader(fr);

            DefaultTableModel model = (DefaultTableModel)librarianList.getModel();
            Object[] lines = br.lines().toArray();
            
            //Generate new Librarian ID
            int newLibrarianID = 0;
            for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split(":");
                if (Integer.parseInt(row[0]) > newLibrarianID){ //if row's id is greater than previous row,
                    newLibrarianID = Integer.parseInt(row[0]);  //update variable to reflect largest value
                }
            }
            //Display in TextField
            String nextLibrarianID = String.valueOf(newLibrarianID + 1);
            user_idTXT.setText(nextLibrarianID);
            
            } catch (FileNotFoundException ex){}
            
            }
            
        } else { //staff & stduent do not
            usernameLBL.setVisible(false);
            usernameTXT.setVisible(false);
            passwordLBL.setVisible(false);
            passwordTXT.setVisible(false);
            confirmPasswordLBL.setVisible(false);
            confirmPasswordTXT.setVisible(false);
            showPasswordCHKBX.setVisible(false);
            
            if (roleCB.isEnabled()){
            try{
            File borrower = new File("src/apls_DBTXT/borrower_t.txt");
        
            FileReader fr = new FileReader(borrower);
            BufferedReader br = new BufferedReader(fr);

            DefaultTableModel model = (DefaultTableModel)borrowerList.getModel();
            Object[] lines = br.lines().toArray();
            
            //Generate new Librarian ID
            int newBorrowerID = 0;
            for(int i = 0; i < lines.length; i++){
                String[] row = lines[i].toString().split(":");
                if (Integer.parseInt(row[0]) > newBorrowerID){ //if row's id is greater than previous row,
                    newBorrowerID = Integer.parseInt(row[0]);  //update variable to reflect largest value
                }
            }
            //Display in TextField
            String nextBorrowerID = String.valueOf(newBorrowerID + 1);
            user_idTXT.setText(nextBorrowerID);
            } catch (FileNotFoundException ex){}
            
            }
        }
    }
    private String passwordList = "";
    private String[] passwordArray;
    private String passwordSelected;
    
    public String getPassword(int selectedRow){
        passwordArray = passwordList.toString().split(":");
        passwordSelected = passwordArray[selectedRow];
        return passwordSelected;
    }
    
    public void setPassword(String pass){
        passwordList = passwordList + pass;
    }
    
    public void APLS_initializeUser(){       
        //Clear Textboxes
        //roleCB.setSelectedIndex(0);
        user_idTXT.setText("");
        nameTXT.setText("");
        phone_numberTXT.setText("");
        emailTXT.setText("");
        usernameTXT.setText("");
        passwordTXT.setText("");
        confirmPasswordTXT.setText("");
        
        cbSetter();
        
        try{
        //BORROWER_T
        File borrower = new File("src/apls_DBTXT/borrower_t.txt");
        
        FileReader fr = new FileReader(borrower);
        BufferedReader br = new BufferedReader(fr);
            
        DefaultTableModel model = (DefaultTableModel)borrowerList.getModel();
        model.setRowCount(0); //clear table
        Object[] lines = br.lines().toArray();
        
        //List Students & Staff
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            model.addRow(row); //load data
        }
        
        //LIBRARIAN_T
        File librarian = new File("src/apls_DBTXT/librarian_t.txt");
                
        fr = new FileReader(librarian);
        br = new BufferedReader(fr);
            
        model = (DefaultTableModel)librarianList.getModel();
        model.setRowCount(0); //clear table
        lines = br.lines().toArray();
        
        passwordList = "";
        //List Librarians
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            passwordList = passwordList + row[3] + ":";
            row[3] = "******";
            model.addRow(row); //load data
        }
        
        } catch(FileNotFoundException ex){}
    }
    
    public void APLS_userInfo(javax.swing.JTable table){
        DefaultTableModel model = (DefaultTableModel)table.getModel(); //model from JTable
        int rowIndex = table.getSelectedRow();

        //Save to variables
        int user_id = Integer.parseInt(model.getValueAt(rowIndex, 0).toString());
        String user_name = model.getValueAt(rowIndex, 1).toString();

        nameTXT.setText(user_name);

        //Save to variables
        if (table == librarianList){
            String username = model.getValueAt(rowIndex, 2).toString();
            String password = model.getValueAt(rowIndex, 3).toString();
            String user_email = model.getValueAt(rowIndex, 4).toString();
            String user_phoneNumber = model.getValueAt(rowIndex, 5).toString();

            roleCB.setSelectedIndex(2);
            phone_numberTXT.setText(user_phoneNumber);
            emailTXT.setText(user_email);
            usernameTXT.setText(username);
            passwordTXT.setText(getPassword(rowIndex));
            confirmPasswordTXT.setText("");
            
            librarianTable = true;
        } else if (table == borrowerList){
            String user_role = model.getValueAt(rowIndex, 2).toString();
            String user_email = model.getValueAt(rowIndex, 3).toString();
            String user_phoneNumber = model.getValueAt(rowIndex, 4).toString();

            phone_numberTXT.setText(user_phoneNumber);
            emailTXT.setText(user_email);
            
            librarianTable = false;
            if (user_role.equals("student")) {
                roleCB.setSelectedIndex(0);
            } else if (user_role.equals("staff")){
                roleCB.setSelectedIndex(1);
            }
        }
        user_idTXT.setText(String.valueOf(user_id));
        
        addUser.setText("Create New User");
        roleCB.setEnabled(false);
        saveChanges.setEnabled(true);
        deleteUser.setEnabled(true);
        addUserMode = false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUser;
    private javax.swing.JLabel borrowerLBL;
    public javax.swing.JTable borrowerList;
    private javax.swing.JLabel confirmPasswordLBL;
    protected javax.swing.JPasswordField confirmPasswordTXT;
    private javax.swing.JButton deleteUser;
    private javax.swing.JLabel emailLBL;
    protected javax.swing.JTextField emailTXT;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel librarianLBL;
    private javax.swing.JLabel librarianLBL1;
    public javax.swing.JTable librarianList;
    public javax.swing.JTable librarianList1;
    private javax.swing.JLabel nameLBL;
    protected javax.swing.JTextField nameTXT;
    private javax.swing.JLabel passwordLBL;
    protected javax.swing.JPasswordField passwordTXT;
    private javax.swing.JLabel phone_numberLBL;
    protected javax.swing.JTextField phone_numberTXT;
    protected javax.swing.JComboBox<String> roleCB;
    private javax.swing.JButton saveChanges;
    private javax.swing.JLabel selectUserLBL;
    private javax.swing.JCheckBox showPasswordCHKBX;
    private javax.swing.JLabel user_idLBL;
    protected javax.swing.JTextField user_idTXT;
    private javax.swing.JLabel usernameLBL;
    protected javax.swing.JTextField usernameTXT;
    // End of variables declaration//GEN-END:variables
}
/* REFERENCES

Knowledge To Share, 2019. JTable in JAVA Swing | Delete Selected Row From JTable. [Online] 
Available at: https://www.youtube.com/watch?v=OsgX1grOJZA
[Accessed 15 March 2021].

*/