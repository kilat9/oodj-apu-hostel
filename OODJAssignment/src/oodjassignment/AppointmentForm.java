/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oodjassignment;

import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.Style;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.properties.TextAlignment;
import java.io.*;
import java.util.Date;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.util.Calendar;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import java.time.temporal.ChronoUnit;
import java.util.Scanner;
/**
 *
 * @author K15H3N
 */
public class AppointmentForm extends javax.swing.JPanel {
    
    public AppointmentForm() {
        initComponents();
        initializeAppointments();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appointment = new javax.swing.JPanel();
        addAppointment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        appointmentList = new javax.swing.JTable();
        id_LBL = new javax.swing.JLabel();
        id_TXT = new javax.swing.JTextField();
        appointmentCustomerId_TXT = new javax.swing.JTextField();
        appointmentCustomerId_LBL = new javax.swing.JLabel();
        appointmentManagerId_LBL = new javax.swing.JLabel();
        appointmentManagerId_TXT = new javax.swing.JTextField();
        appointmentTime_LBL = new javax.swing.JLabel();
        dateCreated_LBL = new javax.swing.JLabel();
        dateCreated_TXT = new javax.swing.JTextField();
        appliance_TXT = new javax.swing.JTextField();
        appliance_LBL = new javax.swing.JLabel();
        appointmentTechnicianId_TXT = new javax.swing.JTextField();
        appointmentTechnicianId_LBL = new javax.swing.JLabel();
        deleteAppointment = new javax.swing.JButton();
        appointment_LBL = new javax.swing.JLabel();
        customerLBL = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        customerList = new javax.swing.JTable();
        technicianLBL = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        technicianList = new javax.swing.JTable();
        updateAppointment = new javax.swing.JButton();
        appointmentTime_TXT = new com.toedter.calendar.JDateChooser();
        slot_LBL = new javax.swing.JLabel();
        slotCB = new javax.swing.JComboBox<>();
        btnAppointmentReport = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(900, 600));

        appointment.setBackground(new java.awt.Color(235, 215, 194));
        appointment.setForeground(new java.awt.Color(226, 38, 88));
        appointment.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 18)); // NOI18N

        addAppointment.setBackground(new java.awt.Color(0, 33, 71));
        addAppointment.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        addAppointment.setForeground(new java.awt.Color(255, 255, 255));
        addAppointment.setText("Add New Appointment");
        addAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentActionPerformed(evt);
            }
        });

        appointmentList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        appointmentList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Date", "Appliance", "Date Created", "Slot", "Customer_ID", "Manager_ID", "Technician_ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        appointmentList.getTableHeader().setReorderingAllowed(false);
        appointmentList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentListMouseClicked(evt);
            }
        });
        appointmentList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                appointmentListKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(appointmentList);
        if (appointmentList.getColumnModel().getColumnCount() > 0) {
            appointmentList.getColumnModel().getColumn(0).setMaxWidth(25);
            appointmentList.getColumnModel().getColumn(5).setMinWidth(75);
            appointmentList.getColumnModel().getColumn(6).setMaxWidth(60);
        }

        id_LBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        id_LBL.setForeground(new java.awt.Color(0, 33, 71));
        id_LBL.setText("Appointment ID");
        id_LBL.setToolTipText("");

        id_TXT.setEditable(false);
        id_TXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        appointmentCustomerId_TXT.setEditable(false);
        appointmentCustomerId_TXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        appointmentCustomerId_LBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        appointmentCustomerId_LBL.setForeground(new java.awt.Color(0, 33, 71));
        appointmentCustomerId_LBL.setText("Customer ID");

        appointmentManagerId_LBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        appointmentManagerId_LBL.setForeground(new java.awt.Color(0, 33, 71));
        appointmentManagerId_LBL.setText("Manager ID");

        appointmentManagerId_TXT.setEditable(false);
        appointmentManagerId_TXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        appointmentTime_LBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        appointmentTime_LBL.setForeground(new java.awt.Color(0, 33, 71));
        appointmentTime_LBL.setText("Appointment Time");

        dateCreated_LBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        dateCreated_LBL.setForeground(new java.awt.Color(0, 33, 71));
        dateCreated_LBL.setText("Date Created");

        dateCreated_TXT.setEditable(false);
        dateCreated_TXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        appliance_TXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        appliance_TXT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                appliance_TXTKeyPressed(evt);
            }
        });

        appliance_LBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        appliance_LBL.setForeground(new java.awt.Color(0, 33, 71));
        appliance_LBL.setText("Appliance");

        appointmentTechnicianId_TXT.setEditable(false);
        appointmentTechnicianId_TXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N

        appointmentTechnicianId_LBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        appointmentTechnicianId_LBL.setForeground(new java.awt.Color(0, 33, 71));
        appointmentTechnicianId_LBL.setText("Technician ID");

        deleteAppointment.setBackground(new java.awt.Color(0, 33, 71));
        deleteAppointment.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        deleteAppointment.setForeground(new java.awt.Color(255, 255, 255));
        deleteAppointment.setText("Delete Appointment");
        deleteAppointment.setEnabled(false);
        deleteAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAppointmentActionPerformed(evt);
            }
        });

        appointment_LBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        appointment_LBL.setForeground(new java.awt.Color(0, 33, 71));
        appointment_LBL.setText("Appointment");

        customerLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        customerLBL.setForeground(new java.awt.Color(0, 33, 71));
        customerLBL.setText("Customer");

        customerList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        customerList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer_ID", "Name", "Email", "Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customerList.getTableHeader().setReorderingAllowed(false);
        customerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                customerListMouseClicked(evt);
            }
        });
        customerList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                customerListKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(customerList);

        technicianLBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        technicianLBL.setForeground(new java.awt.Color(0, 33, 71));
        technicianLBL.setText("Technician");

        technicianList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        technicianList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Technician_ID", "Name", "Email"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        technicianList.getTableHeader().setReorderingAllowed(false);
        technicianList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                technicianListMouseClicked(evt);
            }
        });
        technicianList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                technicianListKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(technicianList);

        updateAppointment.setBackground(new java.awt.Color(0, 33, 71));
        updateAppointment.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        updateAppointment.setForeground(new java.awt.Color(255, 255, 255));
        updateAppointment.setText("Update Appointment");
        updateAppointment.setEnabled(false);
        updateAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAppointmentActionPerformed(evt);
            }
        });

        appointmentTime_TXT.setDateFormatString("dd/MM/y");
        appointmentTime_TXT.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        appointmentTime_TXT.setEnabled(false);
        appointmentTime_TXT.getCalendarButton().setEnabled(true);

        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MONTH, +1);// 1 MONTH later
        Date max = cal.getTime();

        Calendar tommorow = Calendar.getInstance();
        tommorow.add(Calendar.DAY_OF_WEEK, +1); // +1 for tommorow
        Date nextDay = tommorow.getTime();
        appointmentTime_TXT.setSelectableDateRange(nextDay, max); // start from tommorow

        slot_LBL.setFont(new java.awt.Font("Bahnschrift", 0, 16)); // NOI18N
        slot_LBL.setForeground(new java.awt.Color(0, 33, 71));
        slot_LBL.setText("Slot");

        slotCB.setFont(new java.awt.Font("Bahnschrift", 0, 13)); // NOI18N
        slotCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "10am - 12pm", "2pm - 4pm", "4pm - 6pm" }));

        btnAppointmentReport.setBackground(new java.awt.Color(0, 33, 71));
        btnAppointmentReport.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 14)); // NOI18N
        btnAppointmentReport.setForeground(new java.awt.Color(255, 255, 255));
        btnAppointmentReport.setText("Print Appointment Records");
        btnAppointmentReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAppointmentReportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout appointmentLayout = new javax.swing.GroupLayout(appointment);
        appointment.setLayout(appointmentLayout);
        appointmentLayout.setHorizontalGroup(
            appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(appointmentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(id_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(id_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(appointmentTime_LBL, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(appointmentTime_TXT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateCreated_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateCreated_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(slot_LBL, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                            .addComponent(slotCB, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(appointmentCustomerId_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appointmentCustomerId_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(appointmentManagerId_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appointmentManagerId_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(appointmentTechnicianId_TXT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appointmentTechnicianId_LBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(appliance_TXT, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(appliance_LBL, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(100, 100, 100)
                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                    .addComponent(deleteAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(appointmentLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addComponent(appointment_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAppointmentReport))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addComponent(customerLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 263, Short.MAX_VALUE))
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addComponent(technicianLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(236, 236, 236))
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        appointmentLayout.setVerticalGroup(
            appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentLayout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addComponent(addAppointment)
                        .addGap(33, 33, 33)
                        .addComponent(updateAppointment))
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(appointmentLayout.createSequentialGroup()
                                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(appointmentTime_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(id_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(id_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(appointmentLayout.createSequentialGroup()
                                        .addComponent(appointmentTime_TXT, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                                        .addGap(20, 20, 20))))
                            .addGroup(appointmentLayout.createSequentialGroup()
                                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dateCreated_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(slot_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(dateCreated_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(slotCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)))
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(appointmentLayout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(deleteAppointment))
                            .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentLayout.createSequentialGroup()
                                    .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(appointmentTechnicianId_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(appliance_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(appointmentTechnicianId_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(appliance_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, appointmentLayout.createSequentialGroup()
                                    .addComponent(appointmentCustomerId_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(32, 32, 32))
                                .addComponent(appointmentCustomerId_TXT, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(appointmentLayout.createSequentialGroup()
                                .addComponent(appointmentManagerId_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(appointmentManagerId_TXT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(appointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(customerLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAppointmentReport))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(technicianLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(appointmentLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(appointment_LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 921, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(appointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 609, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(appointment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void deleteAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAppointmentActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you would like to delete this appointment?", 
                                      "Delete Appointment?", 
                                      JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
            appointment deleteAppointment = new appointment();
            deleteAppointment.deleteUser(appointmentList.getRowCount(), appointmentList.getColumnCount(), appointmentList.getSelectedRow());
        
            addAppointment.doClick();
            initializeAppointments();
        } else {}
    }//GEN-LAST:event_deleteAppointmentActionPerformed

    private void appointmentListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_appointmentListKeyReleased
        appointmentInfo();
    }//GEN-LAST:event_appointmentListKeyReleased

    private void appointmentListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentListMouseClicked
        appointmentInfo();
    }//GEN-LAST:event_appointmentListMouseClicked

        
    public Boolean addAppointmentMode = true; //Boolean check if ready to add new appointment entry
    String nextAppointmentID;
            
    private void addAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentActionPerformed
        if (addAppointmentMode == false){
            addAppointmentMode = true;
            addAppointment.setText("Add New Appointment");
            
            //Clear Selections
            appointmentList.clearSelection();
            customerList.clearSelection();
            technicianList.clearSelection();
            
            initializeAppointments();
        }
        // VALIDATION
        else if ((appointmentTime_TXT.getDate() == null) ||(appliance_TXT.getText().equals("") == true)){
            JOptionPane.showMessageDialog(null, "Please ensure appointment time and appliance have been stated. Multiple appliances can be seperated by a comma ','", "Incomplete Appointment Entry", JOptionPane.WARNING_MESSAGE); //pronpt user on empty fields
        }
        else if ((appointmentCustomerId_TXT.getText().equals("") == true) || (appointmentTechnicianId_TXT.getText().equals("") == true)) {
            JOptionPane.showMessageDialog(null, "Please ensure customer and technician have been selected from the tables", "Incomplete Appointment Entry", JOptionPane.WARNING_MESSAGE); //pronpt user to select
        }
        else if (appliance_TXT.getText().contains(";") == true){
            JOptionPane.showMessageDialog(null, "Please ensure that the appliance textfield does not have the ';' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE); //pronpt user to select
        }
        else if (checkAvailability(appointmentTimeFormatter.format(appointmentTime_TXT.getDate()), slotCB.getSelectedIndex(), Integer.valueOf(appointmentTechnicianId_TXT.getText())) == false){
            JOptionPane.showMessageDialog(null, "The technician is unavailable for the selected slot and date. Please try choosing another technician, date or slot.", "Appointment Unavailable", JOptionPane.WARNING_MESSAGE); //validate if timeslot has been taken
        }
        // Create Appointment Object
        else {
            appointment newAppointment = new appointment(id_TXT.getText(), appointmentTimeFormatter.format(appointmentTime_TXT.getDate()), appliance_TXT.getText(), dateCreated_TXT.getText(), slotCB.getSelectedIndex(), appointmentCustomerId_TXT.getText(), appointmentManagerId_TXT.getText(), appointmentTechnicianId_TXT.getText());
            initializeAppointments();
        }
                
    }//GEN-LAST:event_addAppointmentActionPerformed
    
    private void customerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_customerListMouseClicked
        clickFiller(customerList, appointmentCustomerId_TXT);
        
//        if (addAppointmentMode == true){
//            DefaultTableModel model = (DefaultTableModel)customerList.getModel(); //model from JTable
//            int rowIndex = customerList.getSelectedRow();
//            rowHighlighter(appointmentList, Integer.parseInt(model.getValueAt(rowIndex, 0).toString()), 4);
//        }
    }//GEN-LAST:event_customerListMouseClicked

    private void customerListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerListKeyReleased
        clickFiller(customerList, appointmentCustomerId_TXT);
        
//        if (addAppointmentMode == true){
//            DefaultTableModel model = (DefaultTableModel)customerList.getModel(); //model from JTable
//            int rowIndex = customerList.getSelectedRow();
//            rowHighlighter(appointmentList, Integer.parseInt(model.getValueAt(rowIndex, 0).toString()), 4);
//        }
    }//GEN-LAST:event_customerListKeyReleased

    private void technicianListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_technicianListMouseClicked
        clickFiller(technicianList, appointmentTechnicianId_TXT);
    }//GEN-LAST:event_technicianListMouseClicked

    private void technicianListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_technicianListKeyReleased
        clickFiller(technicianList, appointmentTechnicianId_TXT);
    }//GEN-LAST:event_technicianListKeyReleased

    private void updateAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAppointmentActionPerformed
        if ((appointmentTime_TXT.getDate() == null) ||(appliance_TXT.getText().equals("") == true)){
            JOptionPane.showMessageDialog(null, "Please ensure appointment time and appliance have been stated. Multiple appliances can be seperated by a comma ','", "Incomplete Appointment Entry", JOptionPane.WARNING_MESSAGE); //pronpt user on empty fields
        }
        else if ((appointmentCustomerId_TXT.getText().equals("") == true) || (appointmentTechnicianId_TXT.getText().equals("") == true)) {
            JOptionPane.showMessageDialog(null, "Please ensure customer and technician have been selected from the tables", "Incomplete Appointment Entry", JOptionPane.WARNING_MESSAGE); //pronpt user to select
        }
        else if (appliance_TXT.getText().contains(";") == true){
            JOptionPane.showMessageDialog(null, "Please ensure that the appliance textfield does not have the ';' character.", "Invalid Character", JOptionPane.WARNING_MESSAGE); //pronpt user to select
        }
        else if (checkAvailability(appointmentTimeFormatter.format(appointmentTime_TXT.getDate()), slotCB.getSelectedIndex(), Integer.valueOf(appointmentTechnicianId_TXT.getText())) == false){
            JOptionPane.showMessageDialog(null, "The technician is unavailable for the selected slot and date. Please try choosing another technician, date or slot.", "Appointment Unavailable", JOptionPane.WARNING_MESSAGE); //validate if timeslot has been taken
        }
        // Create Appointment Object
        else {        
            appointment updateAppointment = new appointment(id_TXT.getText(), appointmentTimeFormatter.format(appointmentTime_TXT.getDate()), appliance_TXT.getText(), dateCreated_TXT.getText(), slotCB.getSelectedIndex(), appointmentCustomerId_TXT.getText(), appointmentManagerId_TXT.getText(), appointmentTechnicianId_TXT.getText(), appointmentList.getRowCount(), appointmentList.getColumnCount(), appointmentList.getSelectedRow());
            addAppointment.doClick();
            initializeAppointments();
        }
    }//GEN-LAST:event_updateAppointmentActionPerformed

    private void btnAppointmentReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAppointmentReportActionPerformed
         try{
           printAppointmentRecords();
           JOptionPane.showMessageDialog(null, "PDF report generated", "Success!", JOptionPane.INFORMATION_MESSAGE);
       } catch(FileNotFoundException e){
            JOptionPane.showMessageDialog(null, "PDF cannot be created", "An Error occured!", JOptionPane.WARNING_MESSAGE);
       }
    }//GEN-LAST:event_btnAppointmentReportActionPerformed

    private void appliance_TXTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_appliance_TXTKeyPressed
        String value = appliance_TXT.getText();
            int l = value.length();
            if (evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9') {
               JOptionPane.showMessageDialog(null, "Please enter only text");
                appliance_TXT.setText("");
            } else {}
    }//GEN-LAST:event_appliance_TXTKeyPressed

    
    private void printAppointmentRecords() throws FileNotFoundException{
        
        
        String filePath = "src\\reports\\appointment_records.pdf";
        PdfWriter pdf1 = new PdfWriter(filePath);
        
        PdfDocument pdfDoc = new PdfDocument(pdf1);
        
        Document Doc = new Document(pdfDoc);
        
        
        Style styleTitle = new Style();
        styleTitle.setTextAlignment(TextAlignment.CENTER);
        styleTitle.setBold();
        styleTitle.setUnderline();
        styleTitle.setFontSize(34);
        String title = "Appointment records";
        Paragraph p1 = new Paragraph(title).addStyle(styleTitle);
        
        Doc.add(p1);
        
        float columnWidth[] = {50,100,100,100,100,50,50,50};
        
        Table table1 = new Table(columnWidth);
        
        table1.addCell("ID");
        table1.addCell("Date");
        table1.addCell("Appliance");
        table1.addCell("Date Created");
        table1.addCell("Slot");
        table1.addCell("Customer_ID");
        table1.addCell("Manager_ID");
        table1.addCell("Technician_ID");
        
        
        for(int i=0; i<appointmentList.getRowCount() ;i++) {
            String ID = appointmentList.getValueAt(i, 0).toString();
            String Date = appointmentList.getValueAt(i, 1).toString();
            String Appliance = appointmentList.getValueAt(i, 2).toString();
            String Date_Created = appointmentList.getValueAt(i, 3).toString();
            String Slot = appointmentList.getValueAt(i, 4).toString();
            String Customer_ID = appointmentList.getValueAt(i,5).toString();
            String Manager_ID = appointmentList.getValueAt(i, 6).toString();
            String Technician_ID = appointmentList.getValueAt(i, 7).toString();
            
            table1.addCell(ID);
            table1.addCell(Date);
            table1.addCell(Appliance);
            table1.addCell(Date_Created);
            table1.addCell(Slot);
            table1.addCell(Customer_ID);
            table1.addCell(Manager_ID);
            table1.addCell(Technician_ID);
        }
        
        Doc.add(table1);
        
        Doc.close();
        
    }
    SimpleDateFormat appointmentTimeFormatter = new SimpleDateFormat("dd/MM/yyyy");
    SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy hh:mm a"); //format date time and am/pm
                
    public void appointmentInfo(){
        try{
            int rowIndex = appointmentList.getSelectedRow();
            
            //Save to variables
            int appointmentId = Integer.parseInt(appointmentList.getValueAt(rowIndex, 0).toString());
            Date appointmentTime = appointmentTimeFormatter.parse(appointmentList.getValueAt(rowIndex, 1).toString());
            String appliance = appointmentList.getValueAt(rowIndex, 2).toString();
            Date dateCreated = formatter.parse(appointmentList.getValueAt(rowIndex, 3).toString());
            int slot = Integer.parseInt(appointmentList.getValueAt(rowIndex, 4).toString());
            int customerId = Integer.parseInt(appointmentList.getValueAt(rowIndex, 5).toString());
            int managerId = Integer.parseInt(appointmentList.getValueAt(rowIndex, 6).toString());
            int technicianId = Integer.parseInt(appointmentList.getValueAt(rowIndex, 7).toString());

            //Save to variables
            id_TXT.setText(String.valueOf(appointmentId));
            appointmentTime_TXT.setDate(appointmentTime);
            appliance_TXT.setText(appliance);
            dateCreated_TXT.setText(formatter.format(dateCreated));
            slotCB.setSelectedIndex(slot);
            appointmentCustomerId_TXT.setText(String.valueOf(customerId));
            appointmentManagerId_TXT.setText(String.valueOf(managerId));
            appointmentTechnicianId_TXT.setText(String.valueOf(technicianId));
            
            rowHighlighter(customerList, customerId , 0); // customer Table [id at 0th row]
            rowHighlighter(technicianList, technicianId, 0); //book Table [id at 0th row]
            
            addAppointment.setText("Create New Appointment");
            addAppointmentMode = false;
            updateAppointment.setEnabled(true);
            deleteAppointment.setEnabled(true);
        } catch (ParseException ex) {}
    }
    
    public boolean checkAvailability(String date, int slotTime, int technicianID){
        int rowIndex = appointmentList.getSelectedRow();

        String appointmentTime;
        int slot, technicianId;
        
        try{
            for(int i = 0; i < appointmentList.getRowCount(); i++){ //rows in appointment List table
                if(i == rowIndex){
                    i++;
                }

                appointmentTime = appointmentList.getValueAt(i, 1).toString();
                slot = Integer.parseInt(appointmentList.getValueAt(i, 4).toString());
                technicianId = Integer.parseInt(appointmentList.getValueAt(i, 7).toString());

                if((appointmentTime.equals(date)) && (slot == slotTime) && (technicianId == technicianID)){
                    return false;
                }
            }
        }catch(IndexOutOfBoundsException ex){
           return true;
        }
        return true;
    }
    
    public void initializeAppointments(){
        //APPOINTMENT_T
        File appointment = new File("src/db/appointment_t.txt");
        
        try{         
        FileReader fr = new FileReader(appointment);
        BufferedReader br = new BufferedReader(fr);
            
        DefaultTableModel model = (DefaultTableModel)appointmentList.getModel();
        model.setRowCount(0); //clear table
        Object[] lines = br.lines().toArray();
        
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(";");
            model.addRow(row); //load data
        }
        
        //Generate Appointment ID for next entry
        int newAppointmentID = 0;
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(";");
            if (Integer.parseInt(row[0]) > newAppointmentID){ //if row's id is greater than previous row,
                newAppointmentID = Integer.parseInt(row[0]);  //update variable to reflect largest value
            }
        }
        
        nextAppointmentID = String.valueOf(newAppointmentID + 1);//+1 for next entry
        id_TXT.setText(nextAppointmentID); //load next appointment ID
        //Clear textboxes        
        appointmentTime_TXT.setDate(null);
        appointmentCustomerId_TXT.setText("");
        appointmentManagerId_TXT.setText(oodjassignment.pLogin.getId());
        appointmentTechnicianId_TXT.setText("");
        appliance_TXT.setText("");
        
        Date dateCreated = new Date();
        dateCreated_TXT.setText(formatter.format(dateCreated));
        
        slotCB.setSelectedIndex(0);
        
        //CUSTOMER_T
        File customer = new File("src/db/customer_t.txt");
        
        fr = new FileReader(customer);
        br = new BufferedReader(fr);
            
        model = (DefaultTableModel)customerList.getModel();
        model.setRowCount(0); //clear table
        lines = br.lines().toArray();
        
        //List Customers
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            model.addRow(row); //load data
        }
        
        //TECHNICIAN_T
        File technician = new File("src/db/centerTechnician_t.txt");
                
        fr = new FileReader(technician);
        br = new BufferedReader(fr);
            
        model = (DefaultTableModel)technicianList.getModel();
        model.setRowCount(0); //clear table
        lines = br.lines().toArray();
        
        //List Technicians
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            model.addRow(row); //load data
        }
        
        } catch(FileNotFoundException ex){}
        updateAppointment.setEnabled(false);
        deleteAppointment.setEnabled(false);
    }
        
    public void rowHighlighter(javax.swing.JTable table, int id, int colNum){
        try{ //Highlight
            int rowNum = -1;
            Object valueRow;
            do{
                rowNum++; //increment to 0
                valueRow = table.getModel().getValueAt(rowNum, colNum); //get the id at stated row
            }while(Integer.parseInt(valueRow.toString()) != id && rowNum < table.getRowCount()); //check if id matches and ensure checking does not exceed number of rows
                table.setRowSelectionInterval(rowNum, rowNum); //highlight the row in table
        } catch (ArrayIndexOutOfBoundsException ex) {
            //to account for the possibility of a deleted record, clear selection if nothing found (the while loop exceeds)
            table.clearSelection(); //clear selection if no longer exists
        }
    }

    private void clickFiller(javax.swing.JTable table, javax.swing.JTextField txt){
        DefaultTableModel model = (DefaultTableModel)table.getModel(); //model from JTable
        int rowIndex = table.getSelectedRow();

        String selectedID = model.getValueAt(rowIndex, 0).toString(); //get id from selected row
        txt.setText(selectedID); //add to textbox
    }
    
    private void updateDBTXT(){
        //update from JTable to textfile
            try {
                File appointmentTXTF = new File("src/apls_DBTXT/appointment_t.txt");
                FileWriter fw = new FileWriter(appointmentTXTF);
                BufferedWriter bw = new BufferedWriter(fw);

                for(int i = 0; i < appointmentList.getRowCount(); i++){ //rows in appointment List table
                    for(int j = 0; j < appointmentList.getColumnCount(); j++){//columns in appointment list table
                        bw.write(appointmentList.getValueAt(i, j).toString()+";"); //use delimiter ":" to seperate
                    }
                    bw.newLine();
                }

                bw.close();
                fw.close();
            
            } catch (IOException ex) {}
            initializeAppointments();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAppointment;
    private javax.swing.JLabel appliance_LBL;
    protected javax.swing.JTextField appliance_TXT;
    private javax.swing.JPanel appointment;
    private javax.swing.JLabel appointmentCustomerId_LBL;
    protected javax.swing.JTextField appointmentCustomerId_TXT;
    javax.swing.JTable appointmentList;
    private javax.swing.JLabel appointmentManagerId_LBL;
    protected javax.swing.JTextField appointmentManagerId_TXT;
    private javax.swing.JLabel appointmentTechnicianId_LBL;
    protected javax.swing.JTextField appointmentTechnicianId_TXT;
    private javax.swing.JLabel appointmentTime_LBL;
    private com.toedter.calendar.JDateChooser appointmentTime_TXT;
    private javax.swing.JLabel appointment_LBL;
    private javax.swing.JButton btnAppointmentReport;
    private javax.swing.JLabel customerLBL;
    javax.swing.JTable customerList;
    private javax.swing.JLabel dateCreated_LBL;
    protected javax.swing.JTextField dateCreated_TXT;
    private javax.swing.JButton deleteAppointment;
    private javax.swing.JLabel id_LBL;
    protected javax.swing.JTextField id_TXT;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    protected javax.swing.JComboBox<String> slotCB;
    private javax.swing.JLabel slot_LBL;
    private javax.swing.JLabel technicianLBL;
    javax.swing.JTable technicianList;
    private javax.swing.JButton updateAppointment;
    // End of variables declaration//GEN-END:variables
}

/* REFERENCES

C#, JAVA,PHP, Programming ,Source Code, 2015. JAVA - How To Get Selected Row Values From JTable Into JTextfields In Java. [Online] 
Available at: https://1bestcsharp.blogspot.com/2015/02/java-how-to-get-selected-row-values.html
[Accessed 27 February 2021].

C#, JAVA,PHP, Programming ,Source Code, 2017. How To Get And Set Jtable Data To Txt File Using Java NetBeans. [Online] 
Available at: https://1bestcsharp.blogspot.com/2017/10/java-import-and-export-text-file-to-jtable.html
[Accessed 28 February 2021].

HowToDoInJava, n.a.. LocalDate format() API. [Online] 
Available at: https://howtodoinjava.com/java/date-time/localdate-format-example/
[Accessed 7 March 2021].

JavaTpoint, n.a.. Get Current Date and Time in Java. [Online] 
Available at: https://www.javatpoint.com/java-get-current-date
[Accessed 6 March 2021].

RoseIndia.Net, n.a.. Getting Cell Values in a JTable. [Online] 
Available at: https://www.roseindia.net/java/example/java/swing/GetCellValues.shtml
[Accessed 5 March 2021].

Singh, C., n.a.. Java – Add days to Date. [Online] 
Available at: https://beginnersbook.com/2017/10/java-add-days-to-date/
[Accessed 6 March 2021].

Singh, C., n.a.. Java 8 – Calculate days between two dates. [Online] 
Available at: https://beginnersbook.com/2017/10/java-8-calculate-days-between-two-dates/#:~:text=In%20this%20tutorial%20we%20will%20see%20how%20to,can%20use%20the%20DAYS.between%20()%20method%20of%20java.time.temporal.ChronoUnit.
[Accessed 7 March 2021].

Stack Overflow, 2010. How to parse a date? [duplicate]. [Online] 
Available at: https://stackoverflow.com/questions/999172/how-to-parse-a-date
[Accessed 29 February 2021].

Stack Overflow, 2011. how to clear JTable. [Online] 
Available at: https://stackoverflow.com/questions/4577792/how-to-clear-jtable
[Accessed 2 March 2021].

Stack Overflow, 2012. Programmatically select a row in JTable. [Online] 
Available at: https://stackoverflow.com/questions/8661251/programmatically-select-a-row-in-jtable
[Accessed 3 March 2021].

Stack Overflow, 2014. How to set the value of specific cell in JTable?. [Online] 
Available at: https://stackoverflow.com/questions/21158083/how-to-set-the-value-of-specific-cell-in-jtable
[Accessed 3 March 2021].

Stack Overflow. (10 September, 2012). how to clear JDateChooser field? [closed]. 
Retrieved from Stack Overflow: 
https://stackoverflow.com/questions/11719917/how-to-clear-jdatechooser-field

Stack Overflow. (4 May, 2017). setting minimum selectable date as 15 years past birthday (from mySQL) and max as current date. 
Retrieved from Stack Overlfow: 
https://stackoverflow.com/questions/43777455/setting-minimum-selectable-date-as-15-years-past-birthday-from-mysql-and-max-a

*/