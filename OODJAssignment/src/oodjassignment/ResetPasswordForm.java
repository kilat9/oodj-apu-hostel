/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package oodjassignment;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import java.util.Date;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author kishe
 */
public class ResetPasswordForm extends javax.swing.JPanel {

    /**
     * Creates new form ResetPasswordForm
     */
    public ResetPasswordForm() {
        initComponents();
        initializeResetPassword();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        resetPasswordList = new javax.swing.JTable();
        resetPasswordLBL = new javax.swing.JLabel();
        resolvedButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(900, 600));

        resetPasswordList.setFont(new java.awt.Font("Bahnschrift", 0, 12)); // NOI18N
        resetPasswordList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Role", "User_ID", "Name", "Email", "Date Requestedl", "Updated?"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resetPasswordList.getTableHeader().setReorderingAllowed(false);
        resetPasswordList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetPasswordListMouseClicked(evt);
            }
        });
        resetPasswordList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                resetPasswordListKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(resetPasswordList);

        resetPasswordLBL.setFont(new java.awt.Font("Bahnschrift", 0, 20)); // NOI18N
        resetPasswordLBL.setForeground(new java.awt.Color(226, 38, 88));
        resetPasswordLBL.setText("Users Requesting a Password Change");

        resolvedButton.setBackground(new java.awt.Color(226, 38, 88));
        resolvedButton.setFont(new java.awt.Font("Tw Cen MT Condensed Extra Bold", 0, 16)); // NOI18N
        resolvedButton.setForeground(new java.awt.Color(255, 255, 255));
        resolvedButton.setText("Mark as Resolved");
        resolvedButton.setEnabled(false);
        resolvedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resolvedButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(resetPasswordLBL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(resolvedButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resetPasswordLBL)
                    .addComponent(resolvedButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private static void checkStatus(){
        if (resetPasswordList.isRowSelected(resetPasswordList.getSelectedRow()) == true){ // only if a row is selected
            resolvedButton.setEnabled(true);
            oodjassignment.AHHASC_Manager.MDIparent.setSelectedIndex(2);
        } else {
            resolvedButton.setEnabled(false);
        }
    }
    
    private void resetPasswordListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetPasswordListMouseClicked
        checkStatus();
    }//GEN-LAST:event_resetPasswordListMouseClicked

    private void resetPasswordListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_resetPasswordListKeyReleased
        checkStatus();
    }//GEN-LAST:event_resetPasswordListKeyReleased

    private void resolvedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resolvedButtonActionPerformed
        // Obtain Data
        DefaultTableModel model = (DefaultTableModel)resetPasswordList.getModel(); //model from JTable
        int rowIndex = resetPasswordList.getSelectedRow();

        model.setValueAt("True", rowIndex, 6);
        
            //update from JTable to textfile
            try {
                File forgotPasswordTXTF = new File("src/db/forgotPassword_t.txt");
                FileWriter fw = new FileWriter(forgotPasswordTXTF);
                BufferedWriter bw = new BufferedWriter(fw);
                
                for(int i = 0; i < resetPasswordList.getRowCount(); i++){ //rows in table
                    for(int j = 0; j < resetPasswordList.getColumnCount(); j++){//columns in table
                        bw.write(resetPasswordList.getValueAt(i, j).toString()+":"); //use delimiter ":" to seperate
                    }
                    bw.newLine();
                }

                bw.close();
                fw.close();
            
            } catch (IOException ex) {}
        resolvedButton.setEnabled(false);
        initializeResetPassword();
    }//GEN-LAST:event_resolvedButtonActionPerformed
    
    private void initializeResetPassword(){
        //FORGOT PASSWORD_T
        File forgotPassword = new File("src/db/forgotPassword_t.txt");
        
        try{         
        FileReader fr = new FileReader(forgotPassword);
        BufferedReader br = new BufferedReader(fr);
            
        DefaultTableModel model = (DefaultTableModel)resetPasswordList.getModel();
        model.setRowCount(0); //clear table
        Object[] lines = br.lines().toArray();
        
        for(int i = 0; i < lines.length; i++){
            String[] row = lines[i].toString().split(":");
            if (row[6].toString().equals("False")){ // only show unpaid appointments
                model.addRow(row); //load data
            }
        }
        } catch(FileNotFoundException ex){}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel resetPasswordLBL;
    static javax.swing.JTable resetPasswordList;
    private static javax.swing.JButton resolvedButton;
    // End of variables declaration//GEN-END:variables
}
